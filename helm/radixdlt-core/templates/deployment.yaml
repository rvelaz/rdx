apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "radixdlt-core.fullname" . }}
  labels:
    {{- include "radixdlt-core.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "radixdlt-core.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "radixdlt-core.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "radixdlt-core.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.persistence.enabled }}
      volumes:
        - name: pv-radix-storage
          persistentVolumeClaim:
            claimName: {{ include "radixdlt-core.fullname" . }}-pvc
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "radixdlt-core.fullname" . }}-envmap
            - secretRef:
                name: {{ include "radixdlt-core.fullname" . }}-secretmap
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            - mountPath: "/opt/radixdlt/RADIXDB"
              name: pv-radix-storage
          volumeMounts:
            - mountPath: "/opt/radixdlt/etc"
              name: pv-radix-storage
          {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: radix
              containerPort: 3000
              protocol: UDP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.readinessProbe.httpGet.port }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
